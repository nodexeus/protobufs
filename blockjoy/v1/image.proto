syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/config.proto";
import "blockjoy/common/v1/protocol.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// An image build for some protocol version.
message Image {
  string image_id = 1;
  string protocol_version_id = 2;
  optional string org_id = 3;
  uint64 build_version = 4;
  string image_uri = 5;
  optional string description = 6;
  repeated ImageProperty properties = 7;
  blockjoy.common.v1.FirewallConfig firewall = 8;
  uint64 min_cpu_cores = 9;
  uint64 min_memory_bytes = 10;
  uint64 min_disk_bytes = 11;
  string min_babel_version = 12;
  repeated blockjoy.common.v1.RamdiskConfig ramdisks = 13;
  blockjoy.common.v1.Visibility visibility = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  optional string dns_scheme = 17;
}

// A config property of an image.
message ImageProperty {
  // The unique identifier to this property.
  string image_property_id = 1;
  // The applicable image for this property.
  string image_id = 2;
  // The lookup key for this property.
  string key = 3;
  // A repeated key to group switches and enums.
  optional string key_group = 4;
  // For repeated key groups, one value must be the default.
  optional bool is_group_default = 5;
  // Whether this property requires different archive data.
  bool new_archive = 6;
  // The default value for this property.
  string default_value = 7;
  // Whether the value may change at runtime.
  bool dynamic_value = 8;
  // How this field should be displayed in the UI.
  blockjoy.common.v1.UiType ui_type = 9;
  // The display name of this property.
  optional string display_name = 10;
  // The display name of the property group.
  optional string display_group = 11;
  // Additional information describing this property.
  optional string description = 12;
  // Additional CPU cores needed when using this property.
  optional int64 add_cpu_cores = 13;
  // Additional memory bytes needed when using this property.
  optional int64 add_memory_bytes = 14;
  // Additional disk bytes needed when using this property.
  optional int64 add_disk_bytes = 15;
  // JSON string array of variant keys where this property should be displayed. NULL means show for all variants.
  optional string variants = 16;
}

// An identifier to archive data in external storage.
message Archive {
  string archive_id = 1;
  string image_id = 2;
  string store_key = 3;
  repeated string image_property_ids = 4;
}

// Service for managing protocol image builds.
service ImageService {
  // Create a new image and set of properties for a protocol version.
  rpc AddImage(ImageServiceAddImageRequest) returns (ImageServiceAddImageResponse);
  // Get image info for some protocol and node type.
  rpc GetImage(ImageServiceGetImageRequest) returns (ImageServiceGetImageResponse);
  // List all image archives for some image.
  rpc ListArchives(ImageServiceListArchivesRequest) returns (ImageServiceListArchivesResponse);
  // Update the storage location of an image archive.
  rpc UpdateArchive(ImageServiceUpdateArchiveRequest) returns (ImageServiceUpdateArchiveResponse);
  // Update the config of an existing image.
  rpc UpdateImage(ImageServiceUpdateImageRequest) returns (ImageServiceUpdateImageResponse);
  
  // Admin endpoints for image management
  // List all images with basic info for admin management.
  rpc ListImages(ImageServiceListImagesRequest) returns (ImageServiceListImagesResponse);
  // Get detailed image info including all properties for admin management.
  rpc GetImageDetails(ImageServiceGetImageDetailsRequest) returns (ImageServiceGetImageDetailsResponse);
  // Add a new property to an existing image.
  rpc AddImageProperty(ImageServiceAddImagePropertyRequest) returns (ImageServiceAddImagePropertyResponse);
  // Update an existing image property.
  rpc UpdateImageProperty(ImageServiceUpdateImagePropertyRequest) returns (ImageServiceUpdateImagePropertyResponse);
  // Delete an image property.
  rpc DeleteImageProperty(ImageServiceDeleteImagePropertyRequest) returns (ImageServiceDeleteImagePropertyResponse);
  // Copy properties from one image version to another.
  rpc CopyImageProperties(ImageServiceCopyImagePropertiesRequest) returns (ImageServiceCopyImagePropertiesResponse);
}

message ImageServiceAddImageRequest {
  // The protocol version id to add this image to.
  string protocol_version_id = 1;
  // Whether this is a public or org-image version.
  optional string org_id = 2;
  // An identifier to where the image is stored.
  string image_uri = 3;
  // A readable description of this image.
  optional string description = 4;
  // The set of properties for configuring this image.
  repeated AddImageProperty properties = 5;
  // The firewall config for this image.
  blockjoy.common.v1.FirewallConfig firewall = 6;
  // The minimum CPU cores to run this image.
  uint64 min_cpu_cores = 7;
  // The minimum memory to run this image.
  uint64 min_memory_bytes = 8;
  // The minimum disk space to run this image.
  uint64 min_disk_bytes = 9;
  // The minimum babel version to run this image.
  string min_babel_version = 10;
  // The set of attached ramdisks.
  repeated blockjoy.common.v1.RamdiskConfig ramdisks = 11;
  // Point each combination of new_archive properties to the correct data.
  repeated ArchivePointer archive_pointers = 12;
  // The DNS scheme (e.g. "https", "wss") for node RPC requests.
  optional string dns_scheme = 13;
}

message AddImageProperty {
  // The lookup key for this property (in lower-kebab-case).
  string key = 1;
  // A repeated key to group switches and enums.
  optional string key_group = 2;
  // For repeated key groups, one value must be the default.
  optional bool is_group_default = 3;
  // Whether this property requires different archive data.
  bool new_archive = 4;
  // The default value for this property.
  string default_value = 5;
  // Whether the value may change at runtime.
  bool dynamic_value = 6;
  // How this field should be displayed in the UI.
  blockjoy.common.v1.UiType ui_type = 7;
  // The display name of this property.
  optional string display_name = 8;
  // The display name of the property group.
  optional string display_group = 9;
  // Additional information describing this property.
  optional string description = 10;
  // Additional CPU cores needed when using this property.
  optional int64 add_cpu_cores = 11;
  // Additional memory bytes needed when using this property.
  optional int64 add_memory_bytes = 12;
  // Additional disk bytes needed when using this property.
  optional int64 add_disk_bytes = 13;
  // JSON string array of variant keys where this property should be displayed. NULL means show for all variants.
  optional string variants = 14;
}

message ArchivePointer {
  // The combination of new_archive property keys to lookup an archive.
  repeated string new_archive_keys = 1;
  // The archive data pointer for this combination of new_archive properties.
  oneof pointer {
    // Use this store key.
    string store_key = 3;
    // This combination of new_archive properties is disallowed.
    google.protobuf.Empty disallowed = 4;
  }
}

message ImageServiceAddImageResponse {
  Image image = 1;
  repeated Archive archives = 2;
}

message ImageServiceGetImageRequest {
  // The version key to get the latest image of.
  blockjoy.common.v1.ProtocolVersionKey version_key = 1;
  // The org id for private protocols, versions or images.
  optional string org_id = 2;
  // A semantic protocol version, or none for latest.
  optional string semantic_version = 3;
  // An image build version, or none for latest.
  optional uint64 build_version = 4;
}

message ImageServiceGetImageResponse {
  Image image = 1;
}

message ImageServiceListArchivesRequest {
  string image_id = 1;
  optional string org_id = 2;
}

message ImageServiceListArchivesResponse {
  repeated Archive archives = 1;
}

message ImageServiceUpdateArchiveRequest {
  string archive_id = 1;
  optional string store_key = 2;
}

message ImageServiceUpdateArchiveResponse {
  Archive archive = 1;
}

message ImageServiceUpdateImageRequest {
  string image_id = 1;
  optional blockjoy.common.v1.Visibility visibility = 2;
}

message ImageServiceUpdateImageResponse {
  Image image = 1;
}

// Summary information about an image for admin list views.
message ImageSummary {
  string image_id = 1;
  string protocol_name = 2;
  blockjoy.common.v1.ProtocolVersionKey version_key = 3;
  uint64 build_version = 4;
  uint32 property_count = 5;
  google.protobuf.Timestamp created_at = 6;
  optional string org_id = 7;
  optional string description = 8;
  blockjoy.common.v1.Visibility visibility = 9;
  string semantic_version = 10;
}

// Request message for listing images with filtering and pagination.
message ImageServiceListImagesRequest {
  optional string search = 1;
  optional string protocol_filter = 2;
  optional string org_filter = 3;
  uint32 page = 4;
  uint32 page_size = 5;
}

// Response message for listing images.
message ImageServiceListImagesResponse {
  repeated ImageSummary images = 1;
  uint32 total_count = 2;
}

// Request message for getting detailed image information.
message ImageServiceGetImageDetailsRequest {
  string image_id = 1;
  optional string org_id = 2;
}

// Response message for getting detailed image information.
message ImageServiceGetImageDetailsResponse {
  Image image = 1;
}

// Request message for adding a new image property.
message ImageServiceAddImagePropertyRequest {
  string image_id = 1;
  AddImageProperty property = 2;
  bool apply_to_newer_versions = 3;
}

// Response message for adding a new image property.
message ImageServiceAddImagePropertyResponse {
  ImageProperty property = 1;
  repeated string affected_image_ids = 2;
}

// Request message for updating an existing image property.
message ImageServiceUpdateImagePropertyRequest {
  string image_property_id = 1;
  AddImageProperty property = 2;
  bool apply_to_newer_versions = 3;
}

// Response message for updating an existing image property.
message ImageServiceUpdateImagePropertyResponse {
  ImageProperty property = 1;
  repeated string affected_image_ids = 2;
}

// Request message for deleting an image property.
message ImageServiceDeleteImagePropertyRequest {
  string image_property_id = 1;
  bool apply_to_newer_versions = 2;
}

// Response message for deleting an image property.
message ImageServiceDeleteImagePropertyResponse {
  repeated string affected_image_ids = 1;
}

// Request message for copying properties between image versions.
message ImageServiceCopyImagePropertiesRequest {
  string source_image_id = 1;
  repeated string target_image_ids = 2;
  optional bool overwrite_existing = 3;
}

// Response message for copying properties between image versions.
message ImageServiceCopyImagePropertiesResponse {
  repeated string affected_image_ids = 1;
  uint32 properties_copied = 2;
}
