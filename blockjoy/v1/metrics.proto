syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/node.proto";

// A service for sending host and node metrics.
service MetricsService {
  // Send the metrics for a set of hosts.
  rpc Host(MetricsServiceHostRequest) returns (MetricsServiceHostResponse);
  // Send the metrics for a set of nodes.
  rpc Node(MetricsServiceNodeRequest) returns (MetricsServiceNodeResponse);
}

// Send metrics for a host.
message MetricsServiceHostRequest {
  HostMetrics metrics = 1;
}

// The metrics of a single host.
message HostMetrics {
  // The host id of the metrics.
  string host_id = 1;
  // The amount of CPU in use (in hundreths of a core).
  optional uint64 used_cpu_hundreths = 2;
  // The amount of memory in use (in bytes).
  optional uint64 used_memory_bytes = 3;
  // The amount of disk space used (in bytes).
  optional uint64 used_disk_bytes = 4;
  // The load during the last minute (in percent).
  optional double load_one_percent = 5;
  // The load during the last five minutes (in percent).
  optional double load_five_percent = 6;
  // The load during the last fifteen minutes (in percent).
  optional double load_fifteen_percent = 7;
  // The amount of network data received since the host was started (in bytes).
  optional uint64 network_received_bytes = 8;
  // The amount of network data sent since the host was started (in bytes).
  optional uint64 network_sent_bytes = 9;
  // The time since the host started (in seconds).
  optional uint64 uptime_seconds = 10;
  // A list of IPs in use by the host.
  repeated string used_ips = 11;
}

message MetricsServiceHostResponse {}

// Send metrics for a set of nodes.
message MetricsServiceNodeRequest {
  repeated NodeMetrics metrics = 1;
}

// The metrics of a single node.
message NodeMetrics {
  // The node id of the metrics.
  string node_id = 1;
  // The current status of the node.
  optional blockjoy.common.v1.NodeStatus node_status = 2;
  // The current APR of the node.
  optional uint64 apr = 3;
  // The age of the most recent block (in seconds).
  optional uint64 block_age = 4;
  // Whether the blockchain is in consensus.
  optional bool consensus = 5;
  // A list of jobs running on the node.
  repeated blockjoy.common.v1.NodeJob jobs = 6;
}

message MetricsServiceNodeResponse {}
